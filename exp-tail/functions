#!/bin/bash

export PATH=$HOME/bin:$PATH:..

# system info
CH=1
NDIMM=1
NCPU=`cat /proc/cpuinfo  | grep processor | wc -l`
MAXCPU=`expr $NCPU - 1`

if uname -a | grep x86_64; then
    archbit="64"
else
    archbit="32"
fi

perf_hwevents="instructions cycles"
perf_hwevents_unc="uncore/event=0x0b,umask=0x01/ uncore/event=0x2C,umask=0x07/ uncore/event=0x2F,umask=0x07/"
echo $perf_hwevents
echo $perf_hwevents_unc


error()
{
    echo "ERR: $*"
    exit
}

get_perf_hwevent_str()
{
    local str=""
    for evt in $perf_hwevents; do
	str="$str -e ${evt}:u"
    done
    echo "$str"
}

get_perf_hwevent_unc_str()
{
    local str=""
    for evt in $perf_hwevents_unc; do
	str="$str -e ${evt}"
    done
    echo "$str"
}

parse_perf_log()
{
    f=$1
    val=`grep elapsed $f | awk '{ print $1 }' | sed "s/,//g"`
    if [ -f "$f" ]; then
	for counter in $perf_hwevents; do
	    [[ $counter == r* ]] && cstr=${counter:1} || cstr=$counter
	    val="$val `grep $cstr $f | awk '{ print $1 }' | sed "s/,//g"`"
	done
    fi
    echo $val
}

parse_uncore_log()
{
    f=$1
    val=`grep attr $f | awk '{ print $1 }' | sed "s/,//g"`
    echo $val
}


spec2006_xeon_high_rtas13="
470.lbm
462.libquantum
437.leslie3d
433.milc
482.sphinx3
450.soplex
434.zeusmp"

spec2006_xeon_rta13="
470.lbm
462.libquantum
437.leslie3d
433.milc
482.sphinx3
450.soplex
434.zeusmp
483.xalancbmk
436.cactusADM
403.gcc
473.astar
471.omnetpp
447.dealII
481.wrf
400.perlbench"

spec2006_xeon_high="
470.lbm
462.libquantum
459.GemsFDTD
437.leslie3d
433.milc
482.sphinx3
429.mcf
450.soplex
434.zeusmp
410.bwaves"

spec2006_xeon_medium="
483.xalancbmk
436.cactusADM
403.gcc
473.astar
471.omnetpp
447.dealII
481.wrf
400.perlbench"

spec2006_xeon_low="
445.gobmk
454.calculix
458.sjeng
401.bzip2
435.gromacs
456.hmmer
444.namd
464.h264ref
465.tonto
453.povray
416.gamess"

spec2006_xeon_all="$spec2006_xeon_high $spec2006_xeon_medium $spec2006_xeon_low"


allspec2006sorted_high="470.lbm
437.leslie3d
462.libquantum
410.bwaves
471.omnetpp
459.GemsFDTD
482.sphinx3
429.mcf
450.soplex"

allspec2006sorted_middle="433.milc
434.zeusmp
483.xalancbmk
436.cactusADM
403.gcc
456.hmmer
473.astar
401.bzip2
400.perlbench
447.dealII
454.calculix
464.h264ref"

allspec2006sorted_low="445.gobmk
458.sjeng
435.gromacs
481.wrf
444.namd
465.tonto
416.gamess
453.povray"

allspec2006sorted_highmiddle="$allspec2006sorted_high $allspec2006sorted_middle"

allspec2006sorted="470.lbm
437.leslie3d
462.libquantum
410.bwaves
471.omnetpp
459.GemsFDTD
482.sphinx3
429.mcf
450.soplex
433.milc
434.zeusmp
483.xalancbmk
436.cactusADM
403.gcc
456.hmmer
473.astar
401.bzip2
400.perlbench
447.dealII
454.calculix
464.h264ref
445.gobmk
458.sjeng
435.gromacs
481.wrf
444.namd
465.tonto
416.gamess
453.povray"

# 81 - 53 + 1 = 29
allspec2006="400.perlbench 
401.bzip2 
403.gcc 
429.mcf 
445.gobmk 
456.hmmer 
458.sjeng 
462.libquantum 
464.h264ref 
471.omnetpp 
473.astar 
483.xalancbmk 
410.bwaves 
416.gamess 
433.milc 
434.zeusmp 
435.gromacs 
436.cactusADM 
437.leslie3d 
444.namd 
447.dealII 
450.soplex 
453.povray 
454.calculix 
459.GemsFDTD 
465.tonto 
470.lbm 
481.wrf 
482.sphinx3"

# 101 - 84 + 1 = 18
midhighmem="401.bzip2
403.gcc
410.bwaves
429.mcf
433.milc
434.zeusmp
436.cactusADM
437.leslie3d
447.dealII
450.soplex
459.GemsFDTD
462.libquantum
465.tonto
471.omnetpp
473.astar
481.wrf
482.sphinx3
483.xalancbmk
"

stfm="462.libquantum
437.leslie3d
450.soplex
433.milc
470.lbm
482.sphinx3
459.GemsFDTD
436.cactusADM
483.xalancbmk
473.astar
471.omnetpp
401.bzip2
447.dealII
481.wrf
465.tonto
403.gcc
"

backup()
{
    dir=$1
    mkdir -p $dir
    mv *.perf $dir
    mv *.trace $dir
    mv *.eps $dir
    mv *.scr $dir
    mv C*.dat $dir
    mv /run/out-*.txt $dir
    chown -R heechul.heechul $dir
}

finish()
{
    sed 's/,//g' $outputfile | sed 's/ /,/g' > ${outputfile%.txt}.csv
    backup backup-`date +%F-%H-%M`
    chown heechul.heechul $outputfile
    log_echo "============================="
    exit
}

log_echo()
{
   echo "$*"
   echo $* >> $outputfile
}

check_root()
{
    if [ `whoami` != "root" ]; then
	error "root perm. is needed"
    fi
}


disable_prefetcher()
{
    check_root
    modprobe msr
    [ -f "./disable_core2_prefetch" ] || error "Failed to disable prefetcher"
    ./disable_core2_prefetch >& /dev/null 
    log_echo "disable hardware prefetcher"
}

enable_prefetcher()
{
    check_root
    modprobe msr
    [ -f "./enable_core2_prefetch" ] || error "Failed to enable prefetcher"
    ./enable_core2_prefetch >& /dev/null
    log_echo "enable hardware prefetcher"
}

set_cpus()
{
    cpus=$1
    idx=0
    check_root

    for v in $cpus; do
	echo "Set CPU${idx} $v"
	echo $v > /sys/devices/system/cpu/cpu${idx}/online
	echo "performance" > /sys/devices/system/cpu/cpu${idx}/cpufreq/scaling_governor
	idx=`expr $idx + 1`
    done
}


init_cgroup()
{
    mount | grep cgroup || mount -t cgroup xxx /sys/fs/cgroup
    mkdir /sys/fs/cgroup/system
    pushd /sys/fs/cgroup/system
    cat /sys/devices/system/cpu/online > cpuset.cpus || error "fail"
    echo 0 > cpuset.mems
    for t in `cat /sys/fs/cgroup/tasks`; do
	echo $t > tasks >& /dev/null || echo "PID $t failed" 
    done
    cat tasks
    echo 1024 > cpu.shares
    popd

    mkdir /sys/fs/cgroup/experiment
    pushd /sys/fs/cgroup/experiment
    cat /sys/devices/system/cpu/online > cpuset.cpus
    echo 0 > cpuset.mems
    echo $$ > tasks
    echo 32768 > cpu.shares

    tasks=`cat tasks`
    echo "pid of exp. bash: $tasks" 
    
    popd
} > /dev/null

# create cgroup. if exist, delete and re-create.
# do not assign tasks, address mask, and pattern:
# these are the user's reponsibility.
init_cgroup_color()
{
    for c in 0 1 2 3; do
	if [ -d "/sys/fs/cgroup/core$c" ]; then
	    cat /sys/fs/cgroup/core$c/tasks > /sys/fs/cgroup/tasks
	    rmdir /sys/fs/cgroup/core$c/
	fi
	mkdir /sys/fs/cgroup/core$c/
	pushd /sys/fs/cgroup/core$c/
	echo $c > cpuset.cpus
	echo 0 > cpuset.mems
	popd
    done
} > /dev/null

kill_spec()
{
	kill -2 `ps x | grep gcc43 | grep -v perf | awk '{ print $1 }'` >& /dev/null
	killall -9 bandwidth cpuhog
}

run_bench()
{
    local name=$1
    local core=$2

    if [ "$name" = "000.bandwidth" ]; then
	runcmd="bandwidth -a write -c $core -t 1000"
    elif [ "$name" = "000.latency" ]; then
	runcmd="latency -m 16384 -i 100000000 -c $core"
    elif [ "$name" = "000.cpuhog" ]; then
	runcmd="cpuhog"
    else
	runcmd="/ssd/cpu2006/bin/specinvoke -d /ssd/cpu2006/benchspec/CPU2006/$name/run/run_base_ref_gcc43-${archbit}bit.0000 -e speccmds.err -o speccmds.stdout -f speccmds.cmd -C -q"
    fi
    taskset -c $core perf stat `get_perf_hwevent_str` -o C$core.$name.perf $runcmd
}

intval=1
set_cpu_interval()
{
    intval=$1
    echo "New interval: $intval"
}


plot()
{
    # file msut be xxx.dat form
    bench=$1
    data=$2
    xstart=$3
    xfinish=$4
    ymax=$5

    [ -z "$xstart" ] && xstart=0
    [ -z "$xfinish" ] && xfinish=10000
    [ -z "$ymax" ] && ymax=500000

    file="${bench}_${xstart}-${xfinish}"
    cat > ${file}.scr <<EOF
set terminal postscript eps enhanced color "Times-Roman" 22
set yrange [0:$ymax]
set xrange [$xstart:$xfinish]
plot '$data' ti "$bench" w l
EOF
    gnuplot ${file}.scr > ${file}.eps
    epspdf  ${file}.eps
}

stop_services()
{
    check_root
    service stop mysql
    service stop apache2
    dropbox stop
}

init_system()
{
    echo "one time things"
#    echo 8 8 8 8 > /proc/sys/kernel/printk
    echo 4096 > /sys/kernel/debug/tracing/buffer_size_kb
    # init_cgroup
    stop_services
    check_root

} > /dev/null
